@startuml
class Clock{
-Observable observable
-Timer clock
-Clock uniqueInstance
-Clock()
+getInstance():clock
-startTick()
-setTime()
+stopClock()
}
interface Visitor{
+visit(Tracker)
+visit(TaskManager)
+visit(Task)
+visit(Interval);
}

interface VisitorRead{
+visit(FileManager)
}
interface Element{
+print()
}

interface VisitorPrint{
+print(Tracker)
+print(Task)
+print(TaskManager)
+print(Interval)
}

class FileManager{
+getJsonObjectRead():JSONObject
+saveToJsonFile(JSONObject)
+readFromJsonFile():TaskManager
+accept():TaskManager
+accept():JSONObject
}

class ToJsonVisitor{
+visit(Tracker):JSONObject
+visit(TaskManager):JSONObject
+visit(Task):JSONObject
+visit(Interval):JSONObject
}

class FromJsonVisitor{
+visit():TaskManager
-createTreeFromJsonObject(JSONObject, TaskManager, List<Tracker>)
-stringToLocalDateTime(String):LocalDateTime
}

class Interval{
-Task parentTask
-LocalDateTime startTime
-LocalDateTime endTime
-boolean inProgress
+Interval()
+isInProgress():boolean
+getDuration():Duration
+getEndTime():LocalDateTime
+getEndTimeToString():String
+setEndTime()
+getStartTimeToString():String
+getStartTime():LocalDateTime
+update()
+toString():String
+print()
}

class PrinterVisitor{
+Timer timer
-TaskManager taskManager
+PrinterVisitor()
+print(Tracker)
+print(TaskManager)
+print(Task)
+print(Interval)
+stopPrinting()
+update()
}

class Task{
-TaskManager parentProject
-List<Interval> listIntervals
-boolean active
+Task()
+getListIntervals():List<Interval>
+getStartTimeToString():String
+getEndTimeToString():String
+getStartTime():LocalDateTime
+updateParentEndTime()
+getDuration():Duration
+endInterval()
+createInterval():Interval
+intervalUpdated()
+toString():String
+getEndTime():LocalDateTime
+print()
}

class TaskManager{
-TaskManager parentProject
-List<Tracker> trackers
+TaskManager(String)
+TaskManager(TaskManager,String)
#updateParentEndTime()
+setStartTime()
+getTrackers():List<Tracker>
+getDuration():Duration
+getStartTime():LocalDateTime
+getStartTimeToString():String
+setEndTime()
+getEndTime():LocalDateTime
+getEndTimeToString():String
+addChild(Tracker)
}

class Tracker{
#String name
#LocalDateTime startTime
#LocalDateTime endTime
+Tracker()
#updateParentEndTime()
+getName():String
+getDuration():Duration
+getStartTimeToString():String
+getEndTimeToString():String
+getStartTime():LocalDateTime
+getEndTime():LocalDateTime
}

interface Observer

class Observable

TaskManager"0.." -- "1.." Task
class Task extends Tracker
class TaskManager extends Tracker
Task"1"*--"0..*"Interval
class Interval implements Element
class Interval implements Observer
TaskManager o--Tracker
class Clock extends Observable
class PrinterVisitor implements VisitorPrint
class PrinterVisitor implements Observer
class Task implements Element
class Tracker implements Element
class TaskManager implements Element
class FileManager implements Element
class FromJsonVisitor implements VisitorRead
class ToJsonVisitor implements Visitor
@enduml